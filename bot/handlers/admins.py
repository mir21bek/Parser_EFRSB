from aiogram import Bot
from aiogram.types import Message, FSInputFile

from cfg.database import Database
from keyboards import admin_kb


db = Database("bot/cfg/database.db")


async def start_admin_task(message: Message):
    await message.answer("–ü–∏–≤–µ—Ç –∞–¥–º–∏–Ω!", reply_markup=admin_kb.start_a_reply())


async def start_users_task(message: Message):
    await message.answer(f"–ü–∏–≤–µ—Ç @{message.from_user.username}!", reply_markup=admin_kb.start_reply())


async def list_users_task(message: Message):
    all_info = list(filter(None, db.get_all_config()[3].split(",")))
    text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for idx, info in enumerate(all_info):
        text += f"{idx+1}. <code>{info}</code>\n"

    await message.answer(text, reply_markup=admin_kb.start_a_reply())


async def add_user_task(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ:\n <code>–î–æ–±–∞–≤–∏—Ç—å</code> 1234567 (id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)", reply_markup=admin_kb.start_a_reply())


async def add_user_2_task(message: Message):
    db.add_user(message.text.split(" ")[1])
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_kb.start_a_reply())


async def del_user_task(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ:\n <code>–£–¥–∞–ª–∏—Ç—å</code> 1234567 (id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)", reply_markup=admin_kb.start_a_reply())


async def del_user_2_task(message: Message):
    db.del_user(message.text.split(" ")[1])
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω", reply_markup=admin_kb.start_a_reply())


async def not_command_a_task(message: Message):
    await message.answer("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç(", reply_markup=admin_kb.start_a_reply())


async def not_command_task(message: Message):
    await message.answer("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç(", reply_markup=admin_kb.start_reply())


async def parser_1_task(message: Message):
    doc_file = FSInputFile(path=f'../parserfile/excel/example.xlsx')
    await message.answer_document(document=doc_file, caption="–û—Ç–ø—Ä–∞–≤—å Excel —Ñ–∞–π–ª –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ üëÜ", reply_markup=admin_kb.start_reply())


async def parser_a_1_task(message: Message):
    doc_file = FSInputFile(path=f'../parserfile/excel/example.xlsx')
    await message.answer_document(document=doc_file, caption="–û—Ç–ø—Ä–∞–≤—å Excel —Ñ–∞–π–ª –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ üëÜ", reply_markup=admin_kb.start_a_reply())


async def parser_2_task(message: Message, bot: Bot):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    await bot.download_file(file_path, f"../parserfile/excel/{message.from_user.id}.xlsx")

    await message.answer(text="–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ üîÑ\n–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚âà 1–º–∏–Ω\n\n<b>–ù–µ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —ç—Ç–æ—Ç!</b>", reply_markup=admin_kb.start_reply())
    db.add_file(message.from_user.id)


async def parser_a_2_task(message: Message, bot: Bot):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    await bot.download_file(file_path, f"../parserfile/excel/{message.from_user.id}.xlsx")

    await message.answer(text="–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ üîÑ\n–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚âà 1–º–∏–Ω\n\n<b>–ù–µ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —ç—Ç–æ—Ç!</b>", reply_markup=admin_kb.start_a_reply())
    db.add_file(message.from_user.id)
